
//! Autogenerated weights for pallet_rmrk_equip
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-16, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Joshuas-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/rmrk-substrate
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_rmrk_equip
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// pallets/rmrk-equip/src/weights.rs
// --template
// ./benchmarking/frame-weight-template.hbs
// --detailed-log-output

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_rmrk_equip.
pub trait WeightInfo {
	fn change_base_issuer() -> Weight;
	fn equip() -> Weight;
	fn unequip() -> Weight;
	fn equippable() -> Weight;
	fn equippable_add() -> Weight;
	fn equippable_remove() -> Weight;
	fn theme_add() -> Weight;
	fn create_base() -> Weight;
}

/// Weights for pallet_rmrk_equip using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: RmrkEquip Bases (r:1 w:1)
	fn change_base_issuer() -> Weight {
		// Minimum execution time: 17_000 nanoseconds.
		Weight::from_ref_time(18_000_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: RmrkCore Nfts (r:2 w:1)
	// Storage: RmrkCore Lock (r:2 w:0)
	// Storage: RmrkEquip Equippings (r:1 w:1)
	// Storage: Uniques Asset (r:2 w:0)
	// Storage: RmrkCore EquippableBases (r:1 w:0)
	// Storage: RmrkCore EquippableSlots (r:1 w:0)
	// Storage: RmrkEquip Parts (r:1 w:0)
	fn equip() -> Weight {
		// Minimum execution time: 54_000 nanoseconds.
		Weight::from_ref_time(56_000_000)
			.saturating_add(T::DbWeight::get().reads(10))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: RmrkCore Lock (r:2 w:0)
	// Storage: RmrkEquip Equippings (r:1 w:1)
	// Storage: RmrkCore Nfts (r:1 w:1)
	// Storage: Uniques Asset (r:2 w:0)
	fn unequip() -> Weight {
		// Minimum execution time: 39_000 nanoseconds.
		Weight::from_ref_time(41_000_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: RmrkEquip Bases (r:1 w:0)
	// Storage: RmrkEquip Parts (r:1 w:1)
	fn equippable() -> Weight {
		// Minimum execution time: 18_000 nanoseconds.
		Weight::from_ref_time(18_000_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: RmrkEquip Bases (r:1 w:0)
	// Storage: RmrkEquip Parts (r:1 w:1)
	fn equippable_add() -> Weight {
		// Minimum execution time: 19_000 nanoseconds.
		Weight::from_ref_time(19_000_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: RmrkEquip Bases (r:1 w:0)
	// Storage: RmrkEquip Parts (r:1 w:1)
	fn equippable_remove() -> Weight {
		// Minimum execution time: 18_000 nanoseconds.
		Weight::from_ref_time(19_000_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: RmrkEquip Bases (r:1 w:0)
	// Storage: RmrkEquip Themes (r:1 w:2)
	fn theme_add() -> Weight {
		// Minimum execution time: 18_000 nanoseconds.
		Weight::from_ref_time(19_000_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: RmrkEquip NextBaseId (r:1 w:1)
	// Storage: RmrkEquip Bases (r:0 w:1)
	fn create_base() -> Weight {
		// Minimum execution time: 14_000 nanoseconds.
		Weight::from_ref_time(15_000_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: RmrkEquip Bases (r:1 w:1)
	fn change_base_issuer() -> Weight {
		// Minimum execution time: 17_000 nanoseconds.
		Weight::from_ref_time(18_000_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: RmrkCore Nfts (r:2 w:1)
	// Storage: RmrkCore Lock (r:2 w:0)
	// Storage: RmrkEquip Equippings (r:1 w:1)
	// Storage: Uniques Asset (r:2 w:0)
	// Storage: RmrkCore EquippableBases (r:1 w:0)
	// Storage: RmrkCore EquippableSlots (r:1 w:0)
	// Storage: RmrkEquip Parts (r:1 w:0)
	fn equip() -> Weight {
		// Minimum execution time: 54_000 nanoseconds.
		Weight::from_ref_time(56_000_000)
			.saturating_add(RocksDbWeight::get().reads(10))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: RmrkCore Lock (r:2 w:0)
	// Storage: RmrkEquip Equippings (r:1 w:1)
	// Storage: RmrkCore Nfts (r:1 w:1)
	// Storage: Uniques Asset (r:2 w:0)
	fn unequip() -> Weight {
		// Minimum execution time: 39_000 nanoseconds.
		Weight::from_ref_time(41_000_000)
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: RmrkEquip Bases (r:1 w:0)
	// Storage: RmrkEquip Parts (r:1 w:1)
	fn equippable() -> Weight {
		// Minimum execution time: 18_000 nanoseconds.
		Weight::from_ref_time(18_000_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: RmrkEquip Bases (r:1 w:0)
	// Storage: RmrkEquip Parts (r:1 w:1)
	fn equippable_add() -> Weight {
		// Minimum execution time: 19_000 nanoseconds.
		Weight::from_ref_time(19_000_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: RmrkEquip Bases (r:1 w:0)
	// Storage: RmrkEquip Parts (r:1 w:1)
	fn equippable_remove() -> Weight {
		// Minimum execution time: 18_000 nanoseconds.
		Weight::from_ref_time(19_000_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: RmrkEquip Bases (r:1 w:0)
	// Storage: RmrkEquip Themes (r:1 w:2)
	fn theme_add() -> Weight {
		// Minimum execution time: 18_000 nanoseconds.
		Weight::from_ref_time(19_000_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: RmrkEquip NextBaseId (r:1 w:1)
	// Storage: RmrkEquip Bases (r:0 w:1)
	fn create_base() -> Weight {
		// Minimum execution time: 14_000 nanoseconds.
		Weight::from_ref_time(15_000_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
}