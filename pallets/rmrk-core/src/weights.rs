
//! Autogenerated weights for pallet_rmrk_core
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-16, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Joshuas-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/rmrk-substrate
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_rmrk_core
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// pallets/rmrk-core/src/weights.rs
// --template
// ./benchmarking/frame-weight-template.hbs
// --detailed-log-output

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_rmrk_core.
pub trait WeightInfo {
	fn create_collection() -> Weight;
	fn mint_nft() -> Weight;
	fn mint_nft_directly_to_nft(n: u32, ) -> Weight;
	fn destroy_collection() -> Weight;
	fn send_to_account(n: u32, ) -> Weight;
	fn send_to_nft(n: u32, ) -> Weight;
	fn burn_nft(n: u32, k: u32, ) -> Weight;
	fn accept_nft(n: u32, ) -> Weight;
	fn reject_nft(n: u32, ) -> Weight;
	fn change_collection_issuer() -> Weight;
	fn set_property() -> Weight;
	fn lock_collection() -> Weight;
	fn replace_resource() -> Weight;
	fn add_basic_resource(n: u32, ) -> Weight;
	fn add_composable_resource(n: u32, ) -> Weight;
	fn add_slot_resource(n: u32, ) -> Weight;
	fn accept_resource(n: u32, ) -> Weight;
	fn remove_resource(n: u32, ) -> Weight;
	fn accept_resource_removal(n: u32, ) -> Weight;
	fn set_priority(n: u32, k: u32, ) -> Weight;
}

/// Weights for pallet_rmrk_core using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Uniques Class (r:1 w:1)
	// Storage: RmrkCore Collections (r:0 w:1)
	// Storage: Uniques ClassAccount (r:0 w:1)
	fn create_collection() -> Weight {
		// Minimum execution time: 32_000 nanoseconds.
		Weight::from_ref_time(32_000_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Uniques Class (r:1 w:1)
	// Storage: RmrkCore Nfts (r:1 w:1)
	// Storage: RmrkCore Collections (r:1 w:1)
	// Storage: Uniques Asset (r:1 w:1)
	// Storage: Uniques CollectionMaxSupply (r:1 w:0)
	// Storage: Uniques Account (r:0 w:1)
	fn mint_nft() -> Weight {
		// Minimum execution time: 48_000 nanoseconds.
		Weight::from_ref_time(49_000_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	// Storage: Uniques Class (r:1 w:1)
	// Storage: RmrkCore Nfts (r:1 w:1)
	// Storage: RmrkCore Collections (r:1 w:1)
	// Storage: Uniques Asset (r:2 w:1)
	// Storage: Uniques CollectionMaxSupply (r:1 w:0)
	// Storage: RmrkCore Children (r:0 w:1)
	// Storage: Uniques Account (r:0 w:1)
	/// The range of component `n` is `[1, 19]`.
	fn mint_nft_directly_to_nft(n: u32, ) -> Weight {
		// Minimum execution time: 53_000 nanoseconds.
		Weight::from_ref_time(49_464_606)
			// Standard Error: 41_399
			.saturating_add(Weight::from_ref_time(3_668_633).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: RmrkCore Collections (r:1 w:1)
	// Storage: Uniques Class (r:1 w:1)
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: Uniques ClassAccount (r:0 w:1)
	// Storage: Uniques ClassMetadataOf (r:0 w:1)
	// Storage: Uniques CollectionMaxSupply (r:0 w:1)
	fn destroy_collection() -> Weight {
		// Minimum execution time: 51_000 nanoseconds.
		Weight::from_ref_time(52_000_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	// Storage: Uniques Asset (r:1 w:1)
	// Storage: RmrkCore Nfts (r:1 w:1)
	// Storage: Uniques Class (r:1 w:0)
	// Storage: RmrkCore Lock (r:1 w:0)
	// Storage: Uniques Account (r:0 w:2)
	// Storage: Uniques ItemPriceOf (r:0 w:1)
	// Storage: RmrkCore Children (r:0 w:1)
	/// The range of component `n` is `[1, 20]`.
	fn send_to_account(n: u32, ) -> Weight {
		// Minimum execution time: 42_000 nanoseconds.
		Weight::from_ref_time(40_742_197)
			// Standard Error: 29_929
			.saturating_add(Weight::from_ref_time(3_493_593).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: Uniques Asset (r:2 w:1)
	// Storage: RmrkCore Nfts (r:2 w:1)
	// Storage: Uniques Class (r:1 w:0)
	// Storage: RmrkCore Lock (r:1 w:0)
	// Storage: RmrkCore Children (r:0 w:1)
	// Storage: Uniques Account (r:0 w:2)
	// Storage: Uniques ItemPriceOf (r:0 w:1)
	/// The range of component `n` is `[1, 20]`.
	fn send_to_nft(n: u32, ) -> Weight {
		// Minimum execution time: 52_000 nanoseconds.
		Weight::from_ref_time(47_909_134)
			// Standard Error: 47_935
			.saturating_add(Weight::from_ref_time(3_837_012).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	// Storage: Uniques Asset (r:1 w:1)
	// Storage: RmrkCore Lock (r:1 w:0)
	// Storage: RmrkCore Nfts (r:1 w:1)
	// Storage: RmrkCore Children (r:1 w:0)
	// Storage: RmrkCore Collections (r:1 w:1)
	// Storage: Uniques Class (r:1 w:1)
	// Storage: RmrkCore Properties (r:0 w:25)
	// Storage: Uniques Account (r:0 w:1)
	// Storage: Uniques ItemPriceOf (r:0 w:1)
	/// The range of component `n` is `[1, 20]`.
	/// The range of component `k` is `[0, 25]`.
	fn burn_nft(n: u32, k: u32, ) -> Weight {
		// Minimum execution time: 92_000 nanoseconds.
		Weight::from_ref_time(93_000_000)
			// Standard Error: 134_861
			.saturating_add(Weight::from_ref_time(79_020_250).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((5_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((5_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(k.into())))
	}
	// Storage: Uniques Asset (r:2 w:0)
	// Storage: RmrkCore Nfts (r:1 w:1)
	/// The range of component `n` is `[1, 20]`.
	fn accept_nft(n: u32, ) -> Weight {
		// Minimum execution time: 29_000 nanoseconds.
		Weight::from_ref_time(30_155_284)
			// Standard Error: 4_645
			.saturating_add(Weight::from_ref_time(176_718).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Uniques Asset (r:2 w:1)
	// Storage: RmrkCore Nfts (r:1 w:1)
	// Storage: RmrkCore Lock (r:1 w:0)
	// Storage: RmrkCore Children (r:2 w:1)
	// Storage: RmrkCore Collections (r:1 w:1)
	// Storage: Uniques Class (r:1 w:1)
	// Storage: Uniques Account (r:0 w:1)
	// Storage: Uniques ItemPriceOf (r:0 w:1)
	/// The range of component `n` is `[1, 20]`.
	fn reject_nft(n: u32, ) -> Weight {
		// Minimum execution time: 82_000 nanoseconds.
		Weight::from_ref_time(83_582_580)
			// Standard Error: 9_510
			.saturating_add(Weight::from_ref_time(292_556).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	// Storage: RmrkCore Collections (r:1 w:1)
	// Storage: Uniques OwnershipAcceptance (r:1 w:1)
	// Storage: Uniques Class (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Uniques ClassAccount (r:0 w:2)
	fn change_collection_issuer() -> Weight {
		// Minimum execution time: 49_000 nanoseconds.
		Weight::from_ref_time(50_000_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: RmrkCore Collections (r:1 w:0)
	// Storage: RmrkCore Lock (r:1 w:0)
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: RmrkCore Properties (r:0 w:1)
	fn set_property() -> Weight {
		// Minimum execution time: 25_000 nanoseconds.
		Weight::from_ref_time(26_000_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: RmrkCore Collections (r:1 w:1)
	fn lock_collection() -> Weight {
		// Minimum execution time: 18_000 nanoseconds.
		Weight::from_ref_time(18_000_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: RmrkCore Resources (r:1 w:1)
	fn replace_resource() -> Weight {
		// Minimum execution time: 22_000 nanoseconds.
		Weight::from_ref_time(23_000_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: RmrkCore Collections (r:1 w:0)
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: RmrkCore Lock (r:1 w:0)
	// Storage: RmrkCore Resources (r:1 w:1)
	/// The range of component `n` is `[1, 20]`.
	fn add_basic_resource(n: u32, ) -> Weight {
		// Minimum execution time: 27_000 nanoseconds.
		Weight::from_ref_time(26_424_910)
			// Standard Error: 11_417
			.saturating_add(Weight::from_ref_time(3_156_396).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: RmrkCore Collections (r:1 w:0)
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: RmrkCore Lock (r:1 w:0)
	// Storage: RmrkCore Resources (r:1 w:1)
	// Storage: RmrkCore EquippableBases (r:0 w:1)
	/// The range of component `n` is `[1, 20]`.
	fn add_composable_resource(n: u32, ) -> Weight {
		// Minimum execution time: 31_000 nanoseconds.
		Weight::from_ref_time(28_988_129)
			// Standard Error: 43_748
			.saturating_add(Weight::from_ref_time(3_347_891).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: RmrkCore Collections (r:1 w:0)
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: RmrkCore Lock (r:1 w:0)
	// Storage: RmrkCore Resources (r:1 w:1)
	// Storage: RmrkCore EquippableSlots (r:0 w:1)
	/// The range of component `n` is `[1, 20]`.
	fn add_slot_resource(n: u32, ) -> Weight {
		// Minimum execution time: 32_000 nanoseconds.
		Weight::from_ref_time(30_805_847)
			// Standard Error: 18_329
			.saturating_add(Weight::from_ref_time(3_237_140).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: RmrkCore Lock (r:1 w:0)
	// Storage: RmrkCore Resources (r:1 w:1)
	/// The range of component `n` is `[1, 20]`.
	fn accept_resource(n: u32, ) -> Weight {
		// Minimum execution time: 27_000 nanoseconds.
		Weight::from_ref_time(25_515_466)
			// Standard Error: 13_172
			.saturating_add(Weight::from_ref_time(3_123_805).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: RmrkCore Collections (r:1 w:0)
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: RmrkCore Resources (r:1 w:1)
	/// The range of component `n` is `[1, 20]`.
	fn remove_resource(n: u32, ) -> Weight {
		// Minimum execution time: 27_000 nanoseconds.
		Weight::from_ref_time(25_443_664)
			// Standard Error: 32_316
			.saturating_add(Weight::from_ref_time(3_303_825).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: RmrkCore Resources (r:1 w:1)
	/// The range of component `n` is `[1, 20]`.
	fn accept_resource_removal(n: u32, ) -> Weight {
		// Minimum execution time: 28_000 nanoseconds.
		Weight::from_ref_time(26_191_651)
			// Standard Error: 13_461
			.saturating_add(Weight::from_ref_time(3_141_950).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Uniques Asset (r:20 w:0)
	// Storage: RmrkCore Lock (r:1 w:0)
	// Storage: RmrkCore Priorities (r:0 w:1)
	/// The range of component `n` is `[1, 25]`.
	/// The range of component `k` is `[1, 20]`.
	fn set_priority(n: u32, k: u32, ) -> Weight {
		// Minimum execution time: 79_000 nanoseconds.
		Weight::from_ref_time(16_820_776)
			// Standard Error: 7_630
			.saturating_add(Weight::from_ref_time(2_838_456).saturating_mul(n.into()))
			// Standard Error: 9_638
			.saturating_add(Weight::from_ref_time(3_072_070).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(k.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Uniques Class (r:1 w:1)
	// Storage: RmrkCore Collections (r:0 w:1)
	// Storage: Uniques ClassAccount (r:0 w:1)
	fn create_collection() -> Weight {
		// Minimum execution time: 32_000 nanoseconds.
		Weight::from_ref_time(32_000_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: Uniques Class (r:1 w:1)
	// Storage: RmrkCore Nfts (r:1 w:1)
	// Storage: RmrkCore Collections (r:1 w:1)
	// Storage: Uniques Asset (r:1 w:1)
	// Storage: Uniques CollectionMaxSupply (r:1 w:0)
	// Storage: Uniques Account (r:0 w:1)
	fn mint_nft() -> Weight {
		// Minimum execution time: 48_000 nanoseconds.
		Weight::from_ref_time(49_000_000)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(5))
	}
	// Storage: Uniques Class (r:1 w:1)
	// Storage: RmrkCore Nfts (r:1 w:1)
	// Storage: RmrkCore Collections (r:1 w:1)
	// Storage: Uniques Asset (r:2 w:1)
	// Storage: Uniques CollectionMaxSupply (r:1 w:0)
	// Storage: RmrkCore Children (r:0 w:1)
	// Storage: Uniques Account (r:0 w:1)
	/// The range of component `n` is `[1, 19]`.
	fn mint_nft_directly_to_nft(n: u32, ) -> Weight {
		// Minimum execution time: 53_000 nanoseconds.
		Weight::from_ref_time(49_464_606)
			// Standard Error: 41_399
			.saturating_add(Weight::from_ref_time(3_668_633).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().writes(6))
	}
	// Storage: RmrkCore Collections (r:1 w:1)
	// Storage: Uniques Class (r:1 w:1)
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: Uniques ClassAccount (r:0 w:1)
	// Storage: Uniques ClassMetadataOf (r:0 w:1)
	// Storage: Uniques CollectionMaxSupply (r:0 w:1)
	fn destroy_collection() -> Weight {
		// Minimum execution time: 51_000 nanoseconds.
		Weight::from_ref_time(52_000_000)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(5))
	}
	// Storage: Uniques Asset (r:1 w:1)
	// Storage: RmrkCore Nfts (r:1 w:1)
	// Storage: Uniques Class (r:1 w:0)
	// Storage: RmrkCore Lock (r:1 w:0)
	// Storage: Uniques Account (r:0 w:2)
	// Storage: Uniques ItemPriceOf (r:0 w:1)
	// Storage: RmrkCore Children (r:0 w:1)
	/// The range of component `n` is `[1, 20]`.
	fn send_to_account(n: u32, ) -> Weight {
		// Minimum execution time: 42_000 nanoseconds.
		Weight::from_ref_time(40_742_197)
			// Standard Error: 29_929
			.saturating_add(Weight::from_ref_time(3_493_593).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().writes(6))
	}
	// Storage: Uniques Asset (r:2 w:1)
	// Storage: RmrkCore Nfts (r:2 w:1)
	// Storage: Uniques Class (r:1 w:0)
	// Storage: RmrkCore Lock (r:1 w:0)
	// Storage: RmrkCore Children (r:0 w:1)
	// Storage: Uniques Account (r:0 w:2)
	// Storage: Uniques ItemPriceOf (r:0 w:1)
	/// The range of component `n` is `[1, 20]`.
	fn send_to_nft(n: u32, ) -> Weight {
		// Minimum execution time: 52_000 nanoseconds.
		Weight::from_ref_time(47_909_134)
			// Standard Error: 47_935
			.saturating_add(Weight::from_ref_time(3_837_012).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().writes(7))
	}
	// Storage: Uniques Asset (r:1 w:1)
	// Storage: RmrkCore Lock (r:1 w:0)
	// Storage: RmrkCore Nfts (r:1 w:1)
	// Storage: RmrkCore Children (r:1 w:0)
	// Storage: RmrkCore Collections (r:1 w:1)
	// Storage: Uniques Class (r:1 w:1)
	// Storage: RmrkCore Properties (r:0 w:25)
	// Storage: Uniques Account (r:0 w:1)
	// Storage: Uniques ItemPriceOf (r:0 w:1)
	/// The range of component `n` is `[1, 20]`.
	/// The range of component `k` is `[0, 25]`.
	fn burn_nft(n: u32, k: u32, ) -> Weight {
		// Minimum execution time: 92_000 nanoseconds.
		Weight::from_ref_time(93_000_000)
			// Standard Error: 134_861
			.saturating_add(Weight::from_ref_time(79_020_250).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().reads((5_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().writes(1))
			.saturating_add(RocksDbWeight::get().writes((5_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(k.into())))
	}
	// Storage: Uniques Asset (r:2 w:0)
	// Storage: RmrkCore Nfts (r:1 w:1)
	/// The range of component `n` is `[1, 20]`.
	fn accept_nft(n: u32, ) -> Weight {
		// Minimum execution time: 29_000 nanoseconds.
		Weight::from_ref_time(30_155_284)
			// Standard Error: 4_645
			.saturating_add(Weight::from_ref_time(176_718).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Uniques Asset (r:2 w:1)
	// Storage: RmrkCore Nfts (r:1 w:1)
	// Storage: RmrkCore Lock (r:1 w:0)
	// Storage: RmrkCore Children (r:2 w:1)
	// Storage: RmrkCore Collections (r:1 w:1)
	// Storage: Uniques Class (r:1 w:1)
	// Storage: Uniques Account (r:0 w:1)
	// Storage: Uniques ItemPriceOf (r:0 w:1)
	/// The range of component `n` is `[1, 20]`.
	fn reject_nft(n: u32, ) -> Weight {
		// Minimum execution time: 82_000 nanoseconds.
		Weight::from_ref_time(83_582_580)
			// Standard Error: 9_510
			.saturating_add(Weight::from_ref_time(292_556).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(7))
	}
	// Storage: RmrkCore Collections (r:1 w:1)
	// Storage: Uniques OwnershipAcceptance (r:1 w:1)
	// Storage: Uniques Class (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Uniques ClassAccount (r:0 w:2)
	fn change_collection_issuer() -> Weight {
		// Minimum execution time: 49_000 nanoseconds.
		Weight::from_ref_time(50_000_000)
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(6))
	}
	// Storage: RmrkCore Collections (r:1 w:0)
	// Storage: RmrkCore Lock (r:1 w:0)
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: RmrkCore Properties (r:0 w:1)
	fn set_property() -> Weight {
		// Minimum execution time: 25_000 nanoseconds.
		Weight::from_ref_time(26_000_000)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: RmrkCore Collections (r:1 w:1)
	fn lock_collection() -> Weight {
		// Minimum execution time: 18_000 nanoseconds.
		Weight::from_ref_time(18_000_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: RmrkCore Resources (r:1 w:1)
	fn replace_resource() -> Weight {
		// Minimum execution time: 22_000 nanoseconds.
		Weight::from_ref_time(23_000_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: RmrkCore Collections (r:1 w:0)
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: RmrkCore Lock (r:1 w:0)
	// Storage: RmrkCore Resources (r:1 w:1)
	/// The range of component `n` is `[1, 20]`.
	fn add_basic_resource(n: u32, ) -> Weight {
		// Minimum execution time: 27_000 nanoseconds.
		Weight::from_ref_time(26_424_910)
			// Standard Error: 11_417
			.saturating_add(Weight::from_ref_time(3_156_396).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: RmrkCore Collections (r:1 w:0)
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: RmrkCore Lock (r:1 w:0)
	// Storage: RmrkCore Resources (r:1 w:1)
	// Storage: RmrkCore EquippableBases (r:0 w:1)
	/// The range of component `n` is `[1, 20]`.
	fn add_composable_resource(n: u32, ) -> Weight {
		// Minimum execution time: 31_000 nanoseconds.
		Weight::from_ref_time(28_988_129)
			// Standard Error: 43_748
			.saturating_add(Weight::from_ref_time(3_347_891).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: RmrkCore Collections (r:1 w:0)
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: RmrkCore Lock (r:1 w:0)
	// Storage: RmrkCore Resources (r:1 w:1)
	// Storage: RmrkCore EquippableSlots (r:0 w:1)
	/// The range of component `n` is `[1, 20]`.
	fn add_slot_resource(n: u32, ) -> Weight {
		// Minimum execution time: 32_000 nanoseconds.
		Weight::from_ref_time(30_805_847)
			// Standard Error: 18_329
			.saturating_add(Weight::from_ref_time(3_237_140).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: RmrkCore Lock (r:1 w:0)
	// Storage: RmrkCore Resources (r:1 w:1)
	/// The range of component `n` is `[1, 20]`.
	fn accept_resource(n: u32, ) -> Weight {
		// Minimum execution time: 27_000 nanoseconds.
		Weight::from_ref_time(25_515_466)
			// Standard Error: 13_172
			.saturating_add(Weight::from_ref_time(3_123_805).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: RmrkCore Collections (r:1 w:0)
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: RmrkCore Resources (r:1 w:1)
	/// The range of component `n` is `[1, 20]`.
	fn remove_resource(n: u32, ) -> Weight {
		// Minimum execution time: 27_000 nanoseconds.
		Weight::from_ref_time(25_443_664)
			// Standard Error: 32_316
			.saturating_add(Weight::from_ref_time(3_303_825).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: RmrkCore Resources (r:1 w:1)
	/// The range of component `n` is `[1, 20]`.
	fn accept_resource_removal(n: u32, ) -> Weight {
		// Minimum execution time: 28_000 nanoseconds.
		Weight::from_ref_time(26_191_651)
			// Standard Error: 13_461
			.saturating_add(Weight::from_ref_time(3_141_950).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Uniques Asset (r:20 w:0)
	// Storage: RmrkCore Lock (r:1 w:0)
	// Storage: RmrkCore Priorities (r:0 w:1)
	/// The range of component `n` is `[1, 25]`.
	/// The range of component `k` is `[1, 20]`.
	fn set_priority(n: u32, k: u32, ) -> Weight {
		// Minimum execution time: 79_000 nanoseconds.
		Weight::from_ref_time(16_820_776)
			// Standard Error: 7_630
			.saturating_add(Weight::from_ref_time(2_838_456).saturating_mul(n.into()))
			// Standard Error: 9_638
			.saturating_add(Weight::from_ref_time(3_072_070).saturating_mul(k.into()))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(k.into())))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(n.into())))
	}
}