
//! Autogenerated weights for `pallet_rmrk_core`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-17, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Sergejs-MacBook-Air.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/rmrk-substrate
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_rmrk_core
// --extrinsic=*
// --steps
// 50
// --repeat
// 20
// --output
// pallets/rmrk-core/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

pub trait WeightInfo {
	fn create_collection() -> Weight;
	fn mint_nft() -> Weight;
	fn mint_nft_directly_to_nft(n: u32) -> Weight;
	fn destroy_collection() -> Weight;
	fn send_to_account(n: u32) -> Weight;
	fn send_to_nft(n: u32) -> Weight;
	fn burn_nft(n: u32, k: u32) -> Weight;
	fn accept_nft(n: u32) -> Weight;
	fn reject_nft(n: u32) -> Weight;
	fn change_collection_issuer() -> Weight;
	fn set_property() -> Weight;
	fn lock_collection() -> Weight;
	fn add_basic_resource(n: u32) -> Weight;
	fn add_composable_resource(n: u32) -> Weight;
	fn add_slot_resource(n: u32) -> Weight;
	fn accept_resource(n: u32) -> Weight;
	fn remove_resource(n: u32) -> Weight;
	fn accept_resource_removal(n: u32) -> Weight;
	fn set_priority(n: u32, k: u32) -> Weight;
	fn replace_resource() -> Weight;
}

pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Uniques Class (r:1 w:1)
	// Storage: RmrkCore Collections (r:0 w:1)
	// Storage: Uniques ClassAccount (r:0 w:1)
	fn create_collection() -> Weight {
		// Minimum execution time: 31_000 nanoseconds.
		Weight::from_ref_time(32_000_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Uniques Class (r:1 w:1)
	// Storage: RmrkCore Nfts (r:1 w:1)
	// Storage: RmrkCore Collections (r:1 w:1)
	// Storage: Uniques Asset (r:1 w:1)
	// Storage: Uniques CollectionMaxSupply (r:1 w:0)
	// Storage: Uniques Account (r:0 w:1)
	fn mint_nft() -> Weight {
		// Minimum execution time: 47_000 nanoseconds.
		Weight::from_ref_time(48_000_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	// Storage: Uniques Class (r:1 w:1)
	// Storage: RmrkCore Nfts (r:1 w:1)
	// Storage: RmrkCore Collections (r:1 w:1)
	// Storage: Uniques Asset (r:2 w:1)
	// Storage: Uniques CollectionMaxSupply (r:1 w:0)
	// Storage: RmrkCore Children (r:0 w:1)
	// Storage: Uniques Account (r:0 w:1)
	/// The range of component `n` is `[1, 19]`.
	fn mint_nft_directly_to_nft(n: u32, ) -> Weight {
		// Minimum execution time: 52_000 nanoseconds.
		Weight::from_ref_time(49_914_677)
			// Standard Error: 32_019
			.saturating_add(Weight::from_ref_time(3_338_584).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: RmrkCore Collections (r:1 w:1)
	// Storage: Uniques Class (r:1 w:1)
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: Uniques ClassAccount (r:0 w:1)
	// Storage: Uniques ClassMetadataOf (r:0 w:1)
	// Storage: Uniques CollectionMaxSupply (r:0 w:1)
	fn destroy_collection() -> Weight {
		// Minimum execution time: 50_000 nanoseconds.
		Weight::from_ref_time(50_000_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	// Storage: Uniques Asset (r:1 w:1)
	// Storage: RmrkCore Nfts (r:1 w:1)
	// Storage: Uniques Class (r:1 w:0)
	// Storage: RmrkCore Lock (r:1 w:0)
	// Storage: Uniques Account (r:0 w:2)
	// Storage: Uniques ItemPriceOf (r:0 w:1)
	// Storage: RmrkCore Children (r:0 w:1)
	/// The range of component `n` is `[1, 20]`.
	fn send_to_account(n: u32, ) -> Weight {
		// Minimum execution time: 41_000 nanoseconds.
		Weight::from_ref_time(40_529_053)
			// Standard Error: 26_390
			.saturating_add(Weight::from_ref_time(3_241_611).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: Uniques Asset (r:2 w:1)
	// Storage: RmrkCore Nfts (r:2 w:1)
	// Storage: Uniques Class (r:1 w:0)
	// Storage: RmrkCore Lock (r:1 w:0)
	// Storage: RmrkCore Children (r:0 w:1)
	// Storage: Uniques Account (r:0 w:2)
	// Storage: Uniques ItemPriceOf (r:0 w:1)
	/// The range of component `n` is `[1, 20]`.
	fn send_to_nft(n: u32, ) -> Weight {
		// Minimum execution time: 50_000 nanoseconds.
		Weight::from_ref_time(49_328_797)
			// Standard Error: 25_787
			.saturating_add(Weight::from_ref_time(3_267_385).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	// Storage: Uniques Asset (r:1 w:1)
	// Storage: RmrkCore Nfts (r:1 w:1)
	// Storage: RmrkCore Children (r:1 w:0)
	// Storage: RmrkCore Collections (r:1 w:1)
	// Storage: Uniques Class (r:1 w:1)
	// Storage: RmrkCore Properties (r:0 w:25)
	// Storage: RmrkCore Lock (r:0 w:1)
	// Storage: Uniques Account (r:0 w:1)
	// Storage: Uniques ItemPriceOf (r:0 w:1)
	/// The range of component `n` is `[1, 20]`.
	/// The range of component `k` is `[0, 25]`.
	fn burn_nft(n: u32, k: u32, ) -> Weight {
		// Minimum execution time: 88_000 nanoseconds.
		Weight::from_ref_time(89_000_000)
			// Standard Error: 146_384
			.saturating_add(Weight::from_ref_time(76_768_378).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((6_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(k.into())))
	}
	// Storage: Uniques Asset (r:2 w:0)
	// Storage: RmrkCore Nfts (r:1 w:1)
	/// The range of component `n` is `[1, 20]`.
	fn accept_nft(n: u32, ) -> Weight {
		// Minimum execution time: 28_000 nanoseconds.
		Weight::from_ref_time(29_279_807)
			// Standard Error: 4_358
			.saturating_add(Weight::from_ref_time(188_641).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Uniques Asset (r:2 w:1)
	// Storage: RmrkCore Nfts (r:1 w:1)
	// Storage: RmrkCore Children (r:2 w:1)
	// Storage: RmrkCore Collections (r:1 w:1)
	// Storage: Uniques Class (r:1 w:1)
	// Storage: RmrkCore Lock (r:0 w:1)
	// Storage: Uniques Account (r:0 w:1)
	// Storage: Uniques ItemPriceOf (r:0 w:1)
	/// The range of component `n` is `[1, 20]`.
	fn reject_nft(n: u32, ) -> Weight {
		// Minimum execution time: 79_000 nanoseconds.
		Weight::from_ref_time(80_661_256)
			// Standard Error: 4_919
			.saturating_add(Weight::from_ref_time(241_591).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	// Storage: RmrkCore Collections (r:1 w:1)
	// Storage: Uniques OwnershipAcceptance (r:1 w:1)
	// Storage: Uniques Class (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Uniques ClassAccount (r:0 w:2)
	fn change_collection_issuer() -> Weight {
		// Minimum execution time: 47_000 nanoseconds.
		Weight::from_ref_time(48_000_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: RmrkCore Collections (r:1 w:0)
	// Storage: RmrkCore Lock (r:1 w:0)
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: RmrkCore Properties (r:0 w:1)
	fn set_property() -> Weight {
		// Minimum execution time: 25_000 nanoseconds.
		Weight::from_ref_time(25_000_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: RmrkCore Collections (r:1 w:1)
	fn lock_collection() -> Weight {
		// Minimum execution time: 17_000 nanoseconds.
		Weight::from_ref_time(18_000_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: RmrkCore Resources (r:1 w:1)
	fn replace_resource() -> Weight {
		// Minimum execution time: 22_000 nanoseconds.
		Weight::from_ref_time(22_000_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: RmrkCore Collections (r:1 w:0)
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: RmrkCore Lock (r:1 w:0)
	// Storage: RmrkCore Resources (r:1 w:1)
	/// The range of component `n` is `[1, 20]`.
	fn add_basic_resource(n: u32, ) -> Weight {
		// Minimum execution time: 27_000 nanoseconds.
		Weight::from_ref_time(25_278_509)
			// Standard Error: 26_152
			.saturating_add(Weight::from_ref_time(3_137_474).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: RmrkCore Collections (r:1 w:0)
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: RmrkCore Lock (r:1 w:0)
	// Storage: RmrkCore Resources (r:1 w:1)
	// Storage: RmrkCore EquippableBases (r:0 w:1)
	/// The range of component `n` is `[1, 20]`.
	fn add_composable_resource(n: u32, ) -> Weight {
		// Minimum execution time: 30_000 nanoseconds.
		Weight::from_ref_time(27_984_467)
			// Standard Error: 36_861
			.saturating_add(Weight::from_ref_time(3_241_071).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: RmrkCore Collections (r:1 w:0)
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: RmrkCore Lock (r:1 w:0)
	// Storage: RmrkCore Resources (r:1 w:1)
	// Storage: RmrkCore EquippableSlots (r:0 w:1)
	/// The range of component `n` is `[1, 20]`.
	fn add_slot_resource(n: u32, ) -> Weight {
		// Minimum execution time: 31_000 nanoseconds.
		Weight::from_ref_time(29_855_362)
			// Standard Error: 16_467
			.saturating_add(Weight::from_ref_time(3_125_612).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: RmrkCore Lock (r:1 w:0)
	// Storage: RmrkCore Resources (r:1 w:1)
	/// The range of component `n` is `[1, 20]`.
	fn accept_resource(n: u32, ) -> Weight {
		// Minimum execution time: 26_000 nanoseconds.
		Weight::from_ref_time(25_260_173)
			// Standard Error: 6_040
			.saturating_add(Weight::from_ref_time(3_004_573).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: RmrkCore Collections (r:1 w:0)
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: RmrkCore Resources (r:1 w:1)
	/// The range of component `n` is `[1, 20]`.
	fn remove_resource(n: u32, ) -> Weight {
		// Minimum execution time: 27_000 nanoseconds.
		Weight::from_ref_time(25_585_465)
			// Standard Error: 15_199
			.saturating_add(Weight::from_ref_time(3_086_680).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: RmrkCore Resources (r:1 w:1)
	/// The range of component `n` is `[1, 20]`.
	fn accept_resource_removal(n: u32, ) -> Weight {
		// Minimum execution time: 27_000 nanoseconds.
		Weight::from_ref_time(25_169_054)
			// Standard Error: 26_481
			.saturating_add(Weight::from_ref_time(3_114_864).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Uniques Asset (r:20 w:0)
	// Storage: RmrkCore Lock (r:1 w:0)
	// Storage: RmrkCore Priorities (r:0 w:1)
	/// The range of component `n` is `[1, 25]`.
	/// The range of component `k` is `[1, 20]`.
	fn set_priority(n: u32, k: u32, ) -> Weight {
		// Minimum execution time: 76_000 nanoseconds.
		Weight::from_ref_time(15_555_098)
			// Standard Error: 3_863
			.saturating_add(Weight::from_ref_time(2_826_170).saturating_mul(n.into()))
			// Standard Error: 4_880
			.saturating_add(Weight::from_ref_time(2_985_272).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(k.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
	}
}
